# meta: exclude from llm

# -----------------------------------
# User event flows
# -----------------------------------

flow _user_said $text -> $event
  """The internal flow for all semantic 'user said' flows."""
  if $text
    match UtteranceUserAction.Finished(final_transcript=$text) as $event
  else
    match UtteranceUserAction.Finished() as $event

flow _user_saying $text -> $event
  """The internal flow for all semantic 'user saying' flows."""
  if $text
    if is_regex($text)
      match UtteranceUserAction.TranscriptUpdated(interim_transcript=$text) as $event
    else
      # This matches to a transcript where after some initial characters it finds $text followed optionally by up to two words
      match UtteranceUserAction.TranscriptUpdated(interim_transcript=regex("(?i).*({$text})((\s*\w+\s*){{0,2}})\W*$")) as $event
  else
    match UtteranceUserAction.TranscriptUpdated() as $event

flow _user_said_something_unexpected -> $event
  """The internal flow for all semantic 'user said something unexpected' flows."""
  match UnhandledEvent(event="UtteranceUserActionFinished", loop_ids={$self.loop_id}) as $event

@meta(user_action='user said "{$transcript}"')
flow user said $text -> $transcript
  """Wait for a user to have said given text."""
  await _user_said $text as $user_said
  $transcript = $user_said.event.final_transcript
  return $transcript

@meta(user_action='user said "{$transcript}"')
flow user said something -> $transcript
  """Wait for a user to have said something."""
  await _user_said as $user_said
  $transcript = $user_said.event.final_transcript
  return $transcript

#@meta(user_action='user said "{$transcript}"')
flow user saying $text -> $transcript
  """Wait for a user to say given text while talking."""
  await _user_saying $text as $user_saying
  $transcript = $user_saying.event.interim_transcript
  return $transcript

#@meta(user_action='user said "{$transcript}"')
flow user saying something -> $transcript
  """Wait for any ongoing user utterance"""
  # Wait for any ongoing user utterance
  await _user_saying as $user_saying
  $transcript = $user_saying.event.interim_transcript
  return $transcript

flow user started saying something
  """Wait for start of user utterance."""
  match UtteranceUserAction.Started()

@meta(user_action='user said "{$transcript}"')
flow user said something unexpected -> $event, $transcript
  """Wait for a user to have said something unexpected (no active match statement)"""
  await _user_said_something_unexpected as $user_said
  $event = $user_said.event
  $transcript = $event.final_transcript
  return $transcript

# -----------------------------------
# Bot action flows
# -----------------------------------

flow _bot_say $text -> $action
  """The internal flow for all semantic level bot utterance flows."""
  await UtteranceBotAction(script=$text) as $action

@meta(bot_action=True)
flow bot say $text
  """Trigger a specific bot utterance."""
  await _bot_say $text

@meta(bot_action=True)
flow bot inform $text
  """Trigger the bot to inform about something (semantic 'bot say' wrapper)."""
  await _bot_say $text

@meta(bot_action=True)
flow bot ask $text
  """Trigger the bot to ask something (semantic 'bot say' wrapper)."""
  await _bot_say $text

@meta(bot_action=True)
flow bot express $text
  """Trigger the bot to express something (semantic 'bot say' wrapper)."""
  await _bot_say $text

@meta(bot_action=True)
flow bot respond $text
  """Trigger the bot to respond with given text (semantic 'bot say' wrapper)."""
  await _bot_say $text

@meta(bot_action=True)
flow bot clarify $text
  """Trigger the bot to clarify something (semantic 'bot say' wrapper)."""
  await _bot_say $text

@meta(bot_action=True)
flow bot suggest $text
  """Trigger the bot to suggest something (semantic 'bot say' wrapper)."""
  await _bot_say $text

# ----------------------------------
# Bot Event Flows
# ----------------------------------

flow bot started saying $text
  match FlowStarted(flow_id="_bot_say", script=$text)

flow bot started saying something
  match FlowStarted(flow_id="_bot_say")

flow bot said $text
  match FlowFinished(flow_id="_bot_say", script=$text) as $event

flow bot said something -> $text
  match FlowFinished(flow_id="_bot_say") as $event
  $text = $event.text

flow bot informed something -> $text
  match FlowFinished(flow_id="bot inform") as $event
  $text = $event.text

flow bot asked something -> $text
  match FlowFinished(flow_id="bot ask") as $event
  $text = $event.text

flow bot expressed something -> $text
  match FlowFinished(flow_id="bot express") as $event
  $text = $event.text

flow bot responded something -> $text
  match FlowFinished(flow_id="bot respond") as $event
  $text = $event.text

flow bot clarified something -> $text
  match FlowFinished(flow_id="bot clarify") as $event
  $text = $event.text

flow bot suggested something -> $text
  match FlowFinished(flow_id="bot suggest") as $event
  $text = $event.text


# -----------------------------------
# State Tracking Flows
# -----------------------------------

@loop("state_tracking")
flow tracking bot talking state
  """tracking bot talking state in global variable $bot_talking_state."""
  global $bot_talking_state
  global $last_bot_message
  if $bot_talking_state == None
    $bot_talking_state = False
  await bot started saying something
  $bot_talking_state = True
  await bot said something as $bot_said_flow
  $bot_talking_state = False
  $last_bot_script = $bot_said_flow.text

@loop("state_tracking")
flow tracking user talking state
  """Track user utterance state in global variables: $user_talking_state, $last_user_transcript."""
  global $user_talking_state
  global $last_user_transcript
  if $user_talking_state == None
    $user_talking_state = False
  await user started saying something
  $user_talking_state = True
  await user said something as $user_said_flow
  $user_talking_state = False
  $last_user_transcript = $user_said_flow.transcript


# -----------------------------------
# Development Helper Flows
# -----------------------------------

@loop("colang_errors_warning")
flow notification of colang errors $bot_message = "Excuse me, there was an internal Colang error."
  """Notify about runtime Colang errors."""
  match ColangError() as $event
  $info = "Colang error: {$event.type} - {escape($event.error)}"
  log $info
  print $info
  if $bot_message
    bot say $bot_message

flow notification of undefined flow start $bot_message = "Failed to start an undefined flow!"
  """Notify about the start of an undefined flow."""
  priority 0.1
  match UnhandledEvent(event="StartFlow") as $event
  $info = "Failed to start undefined flow: '{$event.flow_id}' {$event.loop_ids}"
  log $info
  print $info
  if $bot_message
    bot say $bot_message
  # We need to abort the flow that sent the FlowStart event since it might be waiting for it
  send StopFlow(flow_instance_uid=$event.source_flow_instance_uid)

flow notification of unexpected user utterance $bot_message = "I don't know how to respond to that!"
  """Notify about an unhandled user utterance."""
  priority 0.1
  match UnhandledEvent(event="UtteranceUserActionFinished") as $event
  $info = "Unexpected user utterance: '{$event.final_transcript}'"
  log $info
  print $info
  if $bot_message
    bot say $bot_message

# -----------------------------------
# Utility Flows
# -----------------------------------

flow wait indefinitely
  """Little helper flow to wait indefinitely."""
  match NeverComingEvent()

flow await_flow_by_name $flow_name
  """Start a flow with the provided name and wait for it to finish."""
  $new_flow_instance_uid = "({$flow_name}){uid()}"
  send StartFlow(flow_id=$flow_name, flow_instance_uid=$new_flow_instance_uid)
  match FlowStarted(flow_id=$flow_name, flow_instance_uid=$new_flow_instance_uid) as $event_ref
  match $event_ref.flow.Finished()
