# meta: exclude from llm
import core
import timing

# -----------------------------------
# LLM Enabled Bot Actions
# -----------------------------------

flow bot say something like $text
  """Trigger a bot utterance similar to given text."""
  activate polling llm request response
  $variation = ..."Return a single string that is a new variation of: {$text}"
  await bot say $variation


# -----------------------------------
# LLM Utilities
# -----------------------------------

@active
@loop("llm_response_polling")
flow polling llm request response $interval=1.0
  """Start response polling for any LLM invocation."""
  match StartGenerateUserIntentAction() as $event_ref
    or StartGenerateUserIntentAndBotAction() as $event_ref
    or StartGenerateFlowContinuationAction() as $event_ref
    or StartGenerateFlowFromNameAction() as $event_ref
    or StartGenerateValueAction() as $event_ref
    or StartGenerateFlowFromInstructionsAction() as $event_ref
  start repeating timer "llm_response_polling" $interval as $polling_timer
  match $event_ref.action.Finished()
  send $polling_timer.Stop()


# -----------------------------------
# Interaction Continuation
# -----------------------------------

flow llm continuation
  """Activate all LLM based interaction continuations."""
  activate automating intent detection
  activate generating user intent for unhandled user utterance
  activate continuation on unhandled user intent
  activate continuation on undefined flow


flow generating user intent for unhandled user utterance
  """Continue the interaction on an unexpected user utterance."""
  activate polling llm request response
  activate tracking bot talking state
  global $bot_talking_state

  await _user_said_something_unexpected as $user_said
  $event = $user_said.event

  if not $bot_talking_state != True
    # Don't invoke llm while bot is talking
    log 'flow aborted since bot is in talking state'
    abort

  log 'unexpected user utterance: "{$event.final_transcript}"'
  log 'start generating user intent...'
  $action = 'user said "{$event.final_transcript}"'
  $intent = await GenerateUserIntentAction(user_action=$action, max_example_flows=20)
  log 'generated user intent: {$intent}'

  # Generate the 'user intent' by sending out the FinishFlow event
  send FinishFlow(flow_id=$intent)

  # We need to log the user action
  send UserActionLog(flow_id="user said", parameter=$event.final_transcript, intent_flow_id=$intent)
  # And we also need to log the generated user intent if not done by another mechanism
  when UserIntentLog(flow_id=$intent)
    return
  or when UnhandledEvent(event="FinishFlow", flow_id=$intent)
    send UserIntentLog(flow_id=$intent, parameter=None)


flow continuation on unhandled user utterance
  """Continue the interaction on an unexpected user utterance.
  This invokes the llm only once compared to activating flow 'generating user intent for unhandled user utterance'
  and flow 'continuation on unhandled user intent'"""
  priority 0.1 # Set a lower priority to allow other flows to wait for 'unhandled user intent'
  activate polling llm request response
  activate tracking bot talking state
  global $bot_talking_state

  await _user_said_something_unexpected as $user_said
  $event = $user_said.event
  log 'unexpected user utterance: "{$event.final_transcript}"'

  if not $bot_talking_state != True
    # Don't invoke llm while bot is talking
    log 'flow aborted since bot is in talking state'
    abort

  log 'start generating user intent and bot intent/action...'
  $action = 'user said "{$event.final_transcript}"'


  # retrieve relevant chunks from KB if user_message is not empty

  await RetrieveRelevantChunksAction()


  #await GenerateUserIntentAction(user_action=$action, max_example_flows=20) as $action_ref
  #$user_intent = $action_ref.return_value
  await GenerateUserIntentAndBotAction(user_action=$action, max_example_flows=20) as $action_ref
  $user_intent = $action_ref.return_value["user_intent"]
  $bot_intent = $action_ref.return_value["bot_intent"]
  $bot_action = $action_ref.return_value["bot_action"]
  log "generated user intent: `{$user_intent}`"
  log "generated bot intent: `{$bot_intent}`"
  log "generated bot action: `{$bot_action}`"

  # Generate `user intent` by sending out the FinishFlow event
  send FinishFlow(flow_id=$user_intent)

  # We need to log the user action
  send UserActionLog(flow_id="user said", parameter=$event.final_transcript, intent_flow_id=$user_intent)
  # And we also need to log the generated user intent if not done by another mechanism
  when UserIntentLog(flow_id=$user_intent)
    return
  or when UnhandledEvent(event="FinishFlow", flow_id=$user_intent)
    send UserIntentLog(flow_id=$user_intent, parameter=None)

    # If the user intent was not handled
    log "unhandled user intent: `{$user_intent}`"
    log "continue with generated bot intent/action..."

    # Create and start new flow or an existing on with same name as bot intent
    $flow_exists = False
    if $bot_intent is None
      $bot_intent = "bot reacts accordingly"
    else
      $flow_exists = await CheckValidFlowExistsAction(flow_id=$bot_intent)

    if $flow_exists == False and $bot_action is not None
      $flow_info = await CreateFlowAction(name=$bot_intent, body=$bot_action, decorators='@meta(bot_intent="{$bot_intent}")\n')
      $flows = await AddFlowsAction(config=$flow_info.body)
      if len($flows) == 0
        log "Failed parsing generated bot action flow: `{$flow_info.name}`"
        return

    log "start bot action flow: `{$flow_info.name}`"
    when await_flow_by_name $flow_info.name
      log "bot action flow finished: `{$flow_info.name}`"
      await RemoveFlowsAction(flow_ids=[$flow_info.name])
    else
      log "bot action flow failed: `{$flow_info.name}`"
      await RemoveFlowsAction(flow_ids=[$flow_info.name])


flow unhandled user intent -> $intent
  match UnhandledEvent(event="FinishFlow", flow_id=regex("^user "), loop_ids={$self.loop_id}) as $event
  $intent = $event.flow_id


flow continuation on unhandled user intent
  """Generate and start new flow to continue the interaction for an unhandled user intent."""
  await unhandled user intent as $flow
  log "unhandled user intent: `{$flow.intent}`"

  $flow_name = await llm generate interaction continuation flow

  if $flow_name
    log "start bot action flow: `{$flow_name}`"
    when await_flow_by_name $flow_name
      log "bot action flow finished: `{$flow_name}`"
      await RemoveFlowsAction(flow_ids=[$flow_name])
    else
      log "bot action flow failed: `{$flow_name}`"
      await RemoveFlowsAction(flow_ids=[$flow_name])

# TODO: We currently need to make each instance of this flow an independent loop, since otherwise we have conflicting
# events (RemoveFlowsActionStart) for recursive flow generations. We would better have a way of defining non-competing
# events.
@loop("NEW")
flow continuation on undefined flow
  """Generate and start a new flow to continue the interaction for the start of an undefined flow."""
  match UnhandledEvent(event="StartFlow") as $event
  log 'unhandled start of flow: `{$event.flow_id}` ({$event.flow_instance_uid})'

  # We explicitly set this here so this can start again recursively if needed.
  start_new_flow_instance:

  if search('^user ',$event.flow_id)
    # We have an undefined user intent, so we just fake it to be started by this fallback flow
    log 'unhandled user intent flow: `{$event.flow_id}`'

    send FlowStarted(flow_id=$event.flow_id, flow_instance_uid=$event.flow_instance_uid)
    # Once this fallback flow receives the user intent it will finish and therefore also trigger the original matcher
    # We need to wait for both events, since one enables to add an expected intent and the other will trigger for
    # the generated user intent:
    match FlowFinished(flow_id=$event.flow_id) or FinishFlow(flow_id=$event.flow_id)

  else
    # We have an undefined bot intent, let's generate a new flow for it
    log 'unhandled bot intent flow: `{$event.flow_id}`'

    activate polling llm request response

    # Generate a flow and add it to the runtime
    $flow_source = await GenerateFlowFromNameAction(name=$event.flow_id)
    await AddFlowsAction(config=$flow_source)

    # Start and wait for it to finish
    log "start flow: `{$event.flow_id}`"
    when await_flow_by_name $event.flow_id $event.flow_instance_uid
      log "flow finished: `{$event.flow_id}`"
      await RemoveFlowsAction(flow_ids=[$event.flow_id])
    else
      log "flow failed: `{$event.flow_id}`"
      await RemoveFlowsAction(flow_ids=[$event.flow_id])


flow llm generate interaction continuation flow -> $flow_name
  """Generate a flow that continues the current interaction."""
  activate polling llm request response
  # Generate continuation based current interaction history


  # retrieve relevant chunks from KB if user_message is not empty
  await RetrieveRelevantChunksAction()


  log 'start generating flow continuation...'

  $flow_info = await GenerateFlowContinuationAction(temperature=0.1)
  log "generated flow continuation: `{$flow_info}`"
  $exists = await CheckValidFlowExistsAction(flow_id=$flow_info.name)


  if $exists == False
    $flows = await AddFlowsAction(config=$flow_info.body)
    if len($flows) == 0
      print "Parsing failed for LLM generated flow: `{$flow_info.name}`"
      return None
    log "flow definition added: `{$flow_info.name}`"
  else
    log "flow definition found: `{$flow_info.name}`"

  $flow_name = $flow_info.name
  return $flow_name


flow llm continue interaction
  """Generate and continue with a suitable interaction."""
  $flow_name = await llm generate interaction continuation flow

  if $flow_name
    log "start flow: `{$flow_name}`"
    when await_flow_by_name $flow_name
      log "flow finished: `{$flow_name}`"
      await RemoveFlowsAction(flow_ids=[$flow_name])
    else
      log "flow failed: `{$flow_name}`"
      await RemoveFlowsAction(flow_ids=[$flow_name])

# -----------------------------------
# Interaction History Logging
# -----------------------------------
flow automating intent detection
  """Activate all automated user and bot intent flows logging based on flow naming."""
  activate marking user intent flows
  activate marking bot intent flows
  activate logging marked user intent flows
  activate logging marked bot intent flows


@loop(id="intent_log")
flow marking user intent flows
  """Marking user intent flows using only naming convention."""
  match FlowStarted(flow_id=regex("^user (?!said$|saying|started|say)")) as $event
  $info = flows_info($event.flow.uid)
  if "user_intent" not in $info.meta_tags and "user_action" not in $info.meta_tags
    ($event.flow.context.update({"_user_intent": $event.flow.flow_id}))


@loop(id="intent_log")
flow logging marked user intent flows
  """Generate user intent logging for marked flows that finish by themselves."""
  $pattern = "^user (?!said$|saying|started|say)"
  match FlowFinished(flow_id=regex($pattern)) as $event
  $info = flows_info($event.flow.uid)
  if $event.source_flow_instance_uid == $event.flow_instance_uid and "_user_intent" in $event.flow.context and "user_intent" not in $info.meta_tags and "user_action" not in $info.meta_tags
    $intent = $event.flow.context["_user_intent"]
    send UserIntentLog(flow_id=$intent, parameter=None)


@loop(id="intent_log")
flow marking bot intent flows
  """Marking bot intent flows using only naming convention."""
  match FlowStarted(flow_id=regex("^bot (?!say$|said|inform$|informed|ask$|asked|express$|expressed|respond$|responded|clarify$|clarified|suggest$|suggested|gesture$|gestured|started|bot expected to generate)")) as $event
  $info = flows_info($event.flow.uid)
  if "bot_intent" not in $info.meta_tags and "bot_action" not in $info.meta_tags
    ($event.flow.context.update({"_bot_intent": $event.flow.flow_id}))


@loop(id="intent_log")
flow logging marked bot intent flows
  """Generate user intent logging for marked flows that finish by themselves."""
  match FlowFinished(flow_id=regex("^bot (?!say$|said|inform$|informed|ask$|asked|express$|expressed|respond$|responded|clarify$|clarified|suggest$|suggested|gesture$|gestured|started|bot expected to generate)")) as $event
  $info = flows_info($event.flow.uid)
  if $event.source_flow_instance_uid == $event.flow_instance_uid and "_bot_intent" in $event.flow.context and "user_intent" not in $info.meta_tags and "user_action" not in $info.meta_tags
    $intent = $event.flow.context["_bot_intent"]
    send BotIntentLog(flow_id=$intent, parameter=None)


# ----------------------------------
# State Tracking Flows
# -----------------------------------

@loop("state_tracking")
flow tracking unhandled user intent state
  """Track most recent unhandled user intent state in global variable $user_intent_state."""
  global $user_intent_state
  when unhandled user intent as $flow
    $unhandled_user_intent_state = $flow.flow_name
  or when FlowFinished(flow_id=regex("^user ")) as $event
    $unhandled_user_intent_state = None


# ----------------------------------
# Experimental flows (undocumented)
# ----------------------------------

flow execute llm instruction $instructions
  """This will create a new flow based on the provided instructions and start it."""
  activate polling llm request response
  $flow_info = await GenerateFlowFromInstructionsAction(instructions=$instructions)

  await AddFlowsAction(config=$flow_info.body)

  $new_flow_instance_uid = "({$flow_info.name}){uid()}"
  send StartFlow(flow_id=$flow_info.name, flow_instance_uid=$new_flow_instance_uid)
  match FlowStarted(flow_id=$flow_info.name, flow_instance_uid=$new_flow_instance_uid) as $event_ref
  match $event_ref.flow.Finished()
  await RemoveFlowsAction(flow_ids=[$flow_info.name])


@meta(user_intent=True)
flow user requested a task
  user said "do something"
    or user said "can you do something"
    or user said "please do"


flow custom instructions
  user requested a task
  $instructions = await GetLastUserMessageAction()
  execute llm instruction $instructions
