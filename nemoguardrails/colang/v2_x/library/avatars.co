################################################################
# COLANG 2 STANDARD LIBRARY
# VERSION 0.3.0
#---------------------------------------------------------------
# CHANGELOG
#-------
# 0.3.0 (2/14/2024)
#  - Refactored standard libraries
#-------
################################################################

# meta: exclude from llm
import core
import llm
import timing

# -----------------------------------
# User Event Flows
# -----------------------------------

@meta(user_action='selected choice "{$choice}"')
flow user selected choice $choice_id -> $choice
  """Wait for a UI selection."""
  match VisualChoiceSceneAction.ChoiceUpdated(current_choice=[$choice_id]) as $event
  $choice = $event.current_choice

@meta(user_action=True)
flow user has selected choice $choice_id
  """Wait for a UI selection to have happened (considering also choices that happened right before)."""
  activate tracking visual choice selection state
  global $choice_selection_state
  if $choice_selection_state == None or $choice_selection_state != $choice_id
    match VisualChoiceSceneAction.ChoiceUpdated(current_choice=[$choice_id]) as $event

@meta(user_action=True)
flow user typing $text -> $inputs
  """Wait for user entering keystrokes in UI text field."""
  match VisualFormSceneAction.InputUpdated(interim_inputs=[{"value": regex(".*({$text})((\s*\w+\s*){0,2})\W*$")}]) as $event
  $inputs = $event.interim_inputs

@meta(user_action=True)
flow user gestured $gesture -> $final_gesture
  """Wait for user to make a gesture."""
  match GestureUserAction.Finished(gesture=$gesture) as $event
  $final_gesture = $event.gesture

@meta(user_action=True)
flow user became absent
  """Wait for user to be detected as absent (e.g. out of camera ROI)."""
  match PresenceUserAction.Finished() as $event

@meta(user_action=True)
flow user became present
  """Wait for user to be detected as present (e.g. inside camera ROI)."""
  match PresenceUserAction.Started() as $event

@meta(user_intent=True)
flow user interrupted bot talking $sentence_length=15 $pattern="stop"
  """Wait for when the user talked while bot is speaking."""
  activate tracking bot talking state
  global $bot_talking_state
  while True
    if not $bot_talking_state
      bot started saying something
    while True
      when user saying something as $user_saying_ref
        $transcript = $user_saying_ref.transcript
      or when user said something as $user_said_ref
        $transcript = $user_said_ref.transcript
      or when bot said something
        break

      if len($transcript) > $sentence_length or search($pattern,$transcript)
        log 'bot interrupted by user with: "{$transcript}"'
        return

# ----------------------------------
# Bot Action Flows
# -----------------------------------

@meta(bot_action=True)
flow bot gesture $gesture
  """Trigger a specific bot gesture."""
  if is_str($gesture)
    await GestureBotAction(gesture=$gesture) as $action
  else
    log "Flow `bot gesture` expected parameter $gesture of type `string` but got `{type($gesture)}`: {$gesture}"

@meta(bot_action=True)
flow bot gesture with delay $gesture $delay
  """Trigger a specific bot gesture delayed."""
  wait $delay
  bot gesture $gesture

@meta(bot_action=True)
flow bot posture $posture
  """Trigger a specific bot posture."""
  if is_str($posture)
    await PostureBotAction(posture=$posture) as $action
  else
    log "Flow `bot posture` expected parameter $posture of type `string` but got `{type($posture)}`: {$posture}"

@meta(bot_action=True)
flow scene show choice $prompt $options
  """
  Show a 2D UI with some options to select from
  Options need to be in the format (you can also use only text or only an image description). Example:
  ```
  $my_options = [
     {"id": "option_1", "text": "First option", "image":"cat"},
     {"id": "option_2", "text": "Only text"},
     {"id": "option 3", "image":"city"}
  ]
  start scene show choice $prompt="This is a simple choice" $options=$my_options
  ```
  """
  if is_str($prompt)
    await VisualChoiceSceneAction(prompt=$prompt, support_prompts=["You can click on any option below"], choice_type="selection", allow_multiple_choices=False, options=$options) as $action
  else
    log "Flow `scene show choice` expected parameter $prompt of type `string` but got `{type($prompt)}`: {$prompt}"

@meta(bot_action=True)
flow scene show textual information $title $text $header_image
  """Show a 2D UI with detailed information."""
  if is_str($title) and is_str($text) and is_str($header_image)
    await VisualInformationSceneAction(title=$title, support_prompts=[], content=[{"image":$header_image},{"text":$text}]) as $action
  else
    log "Flow `scene show textual information` expected parameters of type `(string, string, string)` but got `({type($title)}, {type($text)}, {type($header_image)})`"


@meta(bot_action=True)
flow scene show short information $info
  """Show a 2D UI with a short information."""
  if is_str($info)
    await VisualInformationSceneAction(title=$info, support_prompts=[], content=[]) as $action
  else
    log "Flow `scene show short information` expected parameter $info of type `string` but got `{type($info)}`: {$info}"

@meta(bot_action=True)
flow scene show form $prompt $inputs
  """
  Show a 2D UI with some input fields to be filled in.
  Inputs fields need to be in the following format:
  ```
  $my_inputs = [
    {"id": "phone-number", "value": "+41", "description": "Phone number"},
    {"id": "email", "value": "", "description": "Your E-Mail"}
  ]
  start scene show form $prompt="Please enter your phone number and e-mail address" $inputs=$my_inputs
  ```
  """
  if is_str($prompt)
    await VisualFormSceneAction(prompt=$prompt, inputs=$inputs) as $action
  else
    log "Flow `scene show form` expected parameter $prompt of type `string` but got `{type($prompt)}`: {$prompt}"

# ----------------------------------
# Bot Event Flows
# ----------------------------------

flow bot started gesture $gesture
  """Wait for the bot to start with the given gesture."""
  match FlowStarted(flow_id="bot gesture", gesture=$gesture) as $event

flow bot started a gesture -> $gesture
  """Wait for the bot to start with any gesture."""
  match FlowStarted(flow_id="bot gesture") as $event
  $gesture = $event.gesture

flow bot started posture $posture
  """Wait for the bot to start with the given posture."""
  match FlowStarted(flow_id="bot posture", posture=$posture) as $event

flow bot started a posture -> $posture
  """Wait for the bot to start with any posture."""
  match FlowStarted(flow_id="bot posture") as $event
  $posture = $event.posture

flow bot started an action -> $action
  """Wait for the bot to start with any action."""
  match (bot started saying something).Finished() as $action
    or (bot started a gesture).Finished() as $action
    or (bot started a posture).Finished() as $action

# ----------------------------------
# State Tracking Flows
# -----------------------------------

@loop("state_tracking", 10)
flow tracking visual choice selection state
  global $choice_selection_state
  when VisualChoiceSceneAction.Started()
    $choice_selection_state = None
  or when VisualChoiceSceneAction.ChoiceUpdated() as $event
    if len($event.current_choice) > 0
      $choice_selection_state = $event.current_choice[0]
    else
      $choice_selection_state = None
  or when VisualChoiceSceneAction.Finished()
    $choice_selection_state = None

# ----------------------------------
# Utility flows
# ----------------------------------

flow finish all bot actions
  """Stops all the current bot actions."""
  send FinishFlow(flow_id="_bot_say")
  send FinishFlow(flow_id="bot gesture")
  send FinishFlow(flow_id="bot posture")

flow fail all bot actions
  """Stops all the current bot actions."""
  send StopFlow(flow_id="_bot_say")
  send StopFlow(flow_id="bot gesture")
  send StopFlow(flow_id="bot posture")

flow finish all scene actions
  """Stops all the current scene actions."""
  send FinishFlow(flow_id="scene show choice")
  send FinishFlow(flow_id="scene show textual information")
  send FinishFlow(flow_id="scene show short information")
  send FinishFlow(flow_id="scene show form")

@loop("bot_interruption")
flow handling bot talking interruption $mode="inform" $stop_pattern="stop|cancel"
  """Handling the bot talking interruption reaction."""
  user interrupted bot talking $sentence_length=15 $pattern=$stop_pattern
  if $mode == "interrupt"
    finish all bot actions
  if $mode == "abort"
    fail all bot actions
  elif $mode == "inform"
    start VisualInformationSceneAction(title="Please wait with talking!", support_prompts=["You should only talk after the avatar."], content=[])
    wait 3.0
  elif $mode == "ignore"
    log "bot ignored user interruption"


# --------------------------------------
# Posture Management Flows
# --------------------------------------

@loop("managing_bot_postures")
flow managing bot postures $with_idling=False
  """
  Activates all the posture management. If $with_idling is set to `True` the bot will maintain an idle posture until
  a user becomes present.
  """
  activate tracking bot talking state

  if $with_idling
    activate managing attentive posture
    start bot posture "idle"
  else
    activate managing listening posture
    activate managing thinking posture
    activate managing talking posture
    start bot posture "attentive"

  wait indefinitely

@loop("managing_listening_posture")
flow managing listening posture
  """Start and stop listening posture."""
  user started saying something
  start bot posture "listening"
  match UtteranceUserAction.Finished()

@loop("managing_talking_posture")
flow managing talking posture
  """Start and stop talking posture."""
  bot started saying something
  start bot posture "talking"
  bot said something

@loop("managing_thinking_posture")
flow managing thinking posture
  """Start and stop thinking posture."""
  activate tracking bot talking state
  global $bot_talking_state

  match UtteranceUserAction.Finished()
  if not $bot_talking_state
    start bot posture "thinking"
    if not $bot_talking_state
      bot started saying something

@loop("managing_attentive_posture")
flow managing attentive posture
  match PresenceUserAction.Started()
  start bot posture "attentive"
  activate managing listening posture
  activate managing thinking posture
  activate managing talking posture
  match PresenceUserAction.Finished()
