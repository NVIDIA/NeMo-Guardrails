# SPDX-FileCopyrightText: Copyright (c) 2023 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
# SPDX-License-Identifier: Apache-2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import logging
import os
from typing import Any, Dict, List, Optional

import aiohttp
from langchain.callbacks.manager import (
    AsyncCallbackManagerForLLMRun,
    CallbackManagerForLLMRun,
)
from langchain.llms.base import LLM
from pydantic.class_validators import root_validator

log = logging.getLogger(__name__)


class NeMoLLM(LLM):
    """Wrapper around NeMo LLM large language models.

    If NGC_API_HOST, NGC_API_KEY and NGC_ORGANIZATION_ID environment variables are set,
    they will be used for the requests.
    """

    model: str = ""
    temperature: float = 0.7
    tokens_to_generate: int = 256
    stop: Optional[List[str]] = ["<extra_id_1>"]
    api_host: Optional[str] = os.environ.get(
        "NGC_API_HOST", "https://api.llm.ngc.nvidia.com"
    )
    api_key: Optional[str] = os.environ.get("NGC_API_KEY")
    organization_id: Optional[str] = os.environ.get("NGC_ORGANIZATION_ID")
    customization_id: Optional[str] = None

    @root_validator(pre=True, allow_reuse=True)
    def check_env_variables(cls, values):
        for field in ["api_host", "api_key", "organization_id"]:
            # If it's an explicit environment variable, we use that
            if values.get(field, "").startswith("$"):
                env_var_name = values[field][1:]
                values[field] = os.environ.get(env_var_name)
                if not values[field]:
                    raise Exception(f"The env var ${env_var_name} is not set!")

        return values

    @property
    def _default_params(self) -> Dict[str, Any]:
        """Get the default parameters for calling NeMoLLM API."""
        return {
            "temperature": self.temperature,
            "tokens_to_generate": self.tokens_to_generate,
        }

    @property
    def _identifying_params(self) -> Dict[str, Any]:
        """Get the identifying parameters."""
        return {**{"model": self.model}, **self._default_params}

    @property
    def _llm_type(self) -> str:
        """Return type of llm."""
        return "nemollm"

    def _call(
        self,
        prompt: str,
        stop: Optional[List[str]] = None,
        run_manager: Optional[CallbackManagerForLLMRun] = None,
        **kwargs,
    ) -> str:
        raise Exception("Sync mode not supported.")

    async def _acall(
        self,
        prompt: str,
        stop: Optional[List[str]] = None,
        run_manager: Optional[AsyncCallbackManagerForLLMRun] = None,
        **kwargs,
    ) -> str:
        """Call out to NeMoLLM completion endpoint.

        Args:
            prompt: The prompt to pass into the model.
            stop: Optional list of stop words to use when generating.

        Returns:
            The string generated by the model.
        """
        if self.stop is not None and stop is not None:
            raise ValueError("`stop` found in both the input and default params.")
        elif self.stop is not None:
            stop = self.stop
        elif stop is None:
            stop = []

        # If the API_HOST ends with /v1, we remove that (it was the previous convention).
        base_url = self.api_host
        if base_url.endswith("/v1"):
            base_url = base_url[0:-3]

        # Compute the default header values.
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {self.api_key}",
        }

        if self.organization_id:
            headers["Organization-ID"] = self.organization_id

        data = {"prompt": prompt, "stop": stop, **self._default_params}

        url = f"{base_url}/v1/models/{self.model}"
        if self.customization_id is not None:
            url += f"/customizations/{self.customization_id}/completions"
        else:
            url += "/completions"

        async with aiohttp.ClientSession() as session:
            async with session.post(
                url=url,
                headers=headers,
                json=data,
            ) as response:
                if response.status != 200:
                    raise ValueError(
                        f"NeMo LLM completion call failed with status code {response.status}.\n"
                        f"Details: {await response.text()}"
                    )
                response_json = await response.json()

                # The NeMo LLM API also returns the stop tokens at the end of the response.
                # Remove them if they appear as the last token.
                for stop_token in stop or []:
                    if response_json["text"].endswith(stop_token):
                        response_json["text"] = response_json["text"][
                            : -len(stop_token)
                        ]
                        break
                return response_json["text"]
