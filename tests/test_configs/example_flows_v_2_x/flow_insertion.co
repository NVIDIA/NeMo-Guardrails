# Semantic 'user said' wrapper flows

flow user asked $text
  user said $text

flow user expressed $text
  ...

# Semantic 'bot say' wrapper flows

flow bot ask $question_param
  set $question = $question_param
  bot say $question as $say_flow
  set $action = $say_flow.action # Alternatively, as on liner: (bot say $text).action as $action

flow bot asked $question_param
  match (bot ask $question_param).Finished() as $event
  $event.flow.question as $question
  $event.flow.action as $action

flow bot asked something
  match (bot ask).Finished() as $event
  $event.flow.question as $question
  $event.flow.action as $action

flow bot express $text
  ...

flow bot explain $text
  ...

flow bot inform $text
  ...

# user intents

flow user greeted
  user expressed "Hi"
    or user expressed "Hello"

flow user feels good
  user expressed "I am great!"
    or user expressed "Very good!"

flow user feels bad
  user expressed "Not so good"
    or user expressed "I am feeling a bit under the weather"

# bot intents

flow bot greet
  bot express "Hi"
    or bot express "Hello"

flow bot ask how it is going
  bot ask "How is it going?"
    or "How are you doing?"

# FAQs

flow faq1
  user ask about bot name
  bot say "My name is Violet"

flow faq2
  user ask about opening times
  bot say "I am here fore you 24/7!"

flow faq handling
  activate faq1 and faq2
  wait # Or as default we could run activated flows without match statement only once

# Main story

flow main
  activate faq handling
  activate bot question repetition and flow interruption resume handling
  bot greet
  user greeted
  bot ask how it is going # How do we handle a failure? Do we have a special flow for that?
  when user feels good
    bot say "great!"
  else when user feels bad
    bot say "sorry to hear!"
  else # This is for the case where neither expected answer nor another matcher was triggered and therefore bot cases failed
    bot say "Never mind, let's continue"

# Question repetition injection flow
flow bot question repetition
  bot asked something as $bot_question
  $repetition_count = 0
  while $repetition_count < 3
    when user said something as $user_response # Do we have to handle this here ore could we have a flow that handles all 'user said something' cases?
      bot ask """Response to {$user_response.event.text} but insist asking the question {$bot_question.question}"""
    else when user silent "5s"
      bot ask $bot_question.question

# Flow resume injection flow
flow flow interruption resume handling
  bot said something as $bot_said
  set $current_flow = $active_flow
  match FlowInterruption($current_flow)
  match FlowResume($current_flow)
  bot say $bot_said.event.text
